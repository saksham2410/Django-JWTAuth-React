'use strict';

exports.__esModule = true;
exports.default = getStoredState;

var _constants = require('./constants');

function getStoredState(config) {
  return new Promise(function (resolve, reject) {
    var transforms = config.transforms || [];
    var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : _constants.KEY_PREFIX) + config.key;
    var storage = config.storage;
    var debug = config.debug;

    storage.getItem(storageKey, function (err, serialized) {
      if (err) {
        if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist/getStoredState: Error in storage.get', err);
        reject(err);
      }

      if (!serialized) resolve(undefined);else {
        try {
          var state = {};
          var rawState = deserialize(serialized);
          Object.keys(rawState).forEach(function (key) {
            state[key] = transforms.reduceRight(function (subState, transformer) {
              return transformer.out(subState, key);
            }, deserialize(rawState[key]));
          });
          resolve(state);
        } catch (err) {
          if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist/getStoredState: Error restoring data ' + serialized, err);
          reject(err);
        }
      }
    });
  });
}

function deserialize(serial) {
  return JSON.parse(serial);
}